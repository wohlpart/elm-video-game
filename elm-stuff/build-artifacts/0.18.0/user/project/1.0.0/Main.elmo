var _user$project$Main$drawWeapon = function (weap) {
	var _p0 = weap;
	switch (_p0._2) {
		case 4:
			return A2(
				_elm_lang$svg$Svg$rect,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x(
						_elm_lang$core$Basics$toString(_p0._0)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y(
							_elm_lang$core$Basics$toString(_p0._1)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width('10'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('10'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#F3296C'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				{ctor: '[]'});
		case 3:
			return A2(
				_elm_lang$svg$Svg$rect,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x(
						_elm_lang$core$Basics$toString(_p0._0)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y(
							_elm_lang$core$Basics$toString(_p0._1)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width('10'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('10'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#00ECFB'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				{ctor: '[]'});
		case 2:
			return A2(
				_elm_lang$svg$Svg$rect,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x(
						_elm_lang$core$Basics$toString(_p0._0)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y(
							_elm_lang$core$Basics$toString(_p0._1)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width('10'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('10'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#C6F329'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				{ctor: '[]'});
		default:
			return A2(
				_elm_lang$svg$Svg$rect,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x(
						_elm_lang$core$Basics$toString(_p0._0)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y(
							_elm_lang$core$Basics$toString(_p0._1)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width('10'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('10'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#5729F3'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				{ctor: '[]'});
	}
};
var _user$project$Main$background = function (star) {
	var _p1 = star;
	return A2(
		_elm_lang$svg$Svg$circle,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$cx(
				_elm_lang$core$Basics$toString(_p1._0)),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$cy(
					_elm_lang$core$Basics$toString(_p1._1)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$r('1'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill('#FFFFFF'),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{ctor: '[]'});
};
var _user$project$Main$posToBullet = function (updater) {
	var _p2 = updater;
	return A2(
		_elm_lang$svg$Svg$rect,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$x(
				_elm_lang$core$Basics$toString(_p2._0._0)),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$y(
					_elm_lang$core$Basics$toString(_p2._0._1 - 10)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$width('2'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$height('5'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$fill('#2EE11E'),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		{ctor: '[]'});
};
var _user$project$Main$getColor = function (health) {
	var _p3 = health;
	switch (_p3) {
		case 1:
			return '#381579';
		case 2:
			return '#521579';
		case 3:
			return '#A9156A';
		case 4:
			return '#FF1C9E';
		default:
			return '#333333';
	}
};
var _user$project$Main$draw = function (monst) {
	var _p4 = monst;
	return A2(
		_elm_lang$svg$Svg$circle,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$cx(
				_elm_lang$core$Basics$toString(_p4._0._0)),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$cy(
					_elm_lang$core$Basics$toString(_p4._0._1)),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$r('10'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill(
							_user$project$Main$getColor(_p4._0._3)),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{ctor: '[]'});
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$svg$Svg$svg,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 600 600'),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$width('600px'),
				_1: {ctor: '[]'}
			}
		},
		((_elm_lang$core$Native_Utils.cmp(model.health, 0) < 1) && (!model.invincible)) ? {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$rect,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x('0'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y('0'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width('700'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('700'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$fill('#000000'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				},
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		} : A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$rect,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x('0'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y('0'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width('700'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('700'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$fill('#000000'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_elm_lang$core$List$map, _user$project$Main$background, model.stars),
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$List$map, _user$project$Main$drawWeapon, model.weapons),
					A2(
						_elm_lang$core$Basics_ops['++'],
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$rect,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$x(
										_elm_lang$core$Basics$toString(model.x)),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$y(
											_elm_lang$core$Basics$toString(model.y)),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$width('20'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$height('10'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$fill('#0B79CE'),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						},
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(_elm_lang$core$List$map, _user$project$Main$posToBullet, model.bullets),
							A2(_elm_lang$core$List$map, _user$project$Main$draw, model.monsters)))))));
};
var _user$project$Main$collision = F8(
	function (x1, y1, w1, h1, x2, y2, w2, h2) {
		return (((_elm_lang$core$Native_Utils.cmp(x1, x2) < 0) && (_elm_lang$core$Native_Utils.cmp(x1 + w1, x2) > 0)) && ((_elm_lang$core$Native_Utils.cmp(y1, y2) < 0) && (_elm_lang$core$Native_Utils.cmp(y1 + h1, y2) > 0))) || (((_elm_lang$core$Native_Utils.cmp(x1, x2 + w1) < 0) && (_elm_lang$core$Native_Utils.cmp(x1 + w1, x2 + w1) > 0)) && ((_elm_lang$core$Native_Utils.cmp(y1, y2) < 0) && (_elm_lang$core$Native_Utils.cmp(y1 + h1, y2) > 0)));
	});
var _user$project$Main$collide = F3(
	function (mx, my, bullet) {
		var _p5 = bullet;
		return A8(_user$project$Main$collision, mx - 10, my - 10, 20, 20, _p5._0._0, _p5._0._1, 2, 10);
	});
var _user$project$Main$monsterHit = F2(
	function (bullet, monster) {
		var _p6 = monster;
		return !_elm_lang$core$List$isEmpty(
			A2(
				_elm_lang$core$List$filter,
				A2(_user$project$Main$collide, _p6._0._0, _p6._0._1),
				bullet));
	});
var _user$project$Main$updateHealth = function (monster) {
	var _p7 = monster;
	return _p7._1(
		{ctor: '_Tuple2', _0: 0, _1: 1});
};
var _user$project$Main$func = F2(
	function (bullets, monster) {
		return A2(_user$project$Main$monsterHit, bullets, monster) ? _user$project$Main$updateHealth(monster) : monster;
	});
var _user$project$Main$upd = F2(
	function (bullets, monsters) {
		return A2(
			_elm_lang$core$List$map,
			_user$project$Main$func(bullets),
			monsters);
	});
var _user$project$Main$removeDead = function (monster) {
	var _p8 = monster;
	return (_elm_lang$core$Native_Utils.cmp(_p8._0._3, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(_p8._0._1, 600) < 0);
};
var _user$project$Main$collidem = F3(
	function (bx, by, monster) {
		var _p9 = monster;
		return A8(_user$project$Main$collision, _p9._0._0 - 10, _p9._0._1 - 10, 20, 20, bx, by, 2, 10);
	});
var _user$project$Main$updateBulHealth = function (bullet) {
	var _p10 = bullet;
	return _p10._1(
		{ctor: '_Tuple2', _0: 0, _1: 1});
};
var _user$project$Main$bulletHit = F2(
	function (monster, bullet) {
		var _p11 = bullet;
		return !_elm_lang$core$List$isEmpty(
			A2(
				_elm_lang$core$List$filter,
				A2(_user$project$Main$collidem, _p11._0._0, _p11._0._1),
				monster));
	});
var _user$project$Main$func1 = F2(
	function (monsters, bullet) {
		return A2(_user$project$Main$bulletHit, monsters, bullet) ? _user$project$Main$updateBulHealth(bullet) : bullet;
	});
var _user$project$Main$updateBul = F2(
	function (monsters, bullets) {
		return A2(
			_elm_lang$core$List$map,
			_user$project$Main$func1(monsters),
			bullets);
	});
var _user$project$Main$rmvBullets = function (bullet) {
	var _p12 = bullet;
	var _p13 = _p12._0._1;
	return (_elm_lang$core$Native_Utils.cmp(_p12._0._2, 0) > 0) && ((_elm_lang$core$Native_Utils.cmp(_p13, -10) > 0) && (_elm_lang$core$Native_Utils.cmp(_p13, 610) < 0));
};
var _user$project$Main$hitPlayer1 = F3(
	function (px, py, monster) {
		var _p14 = monster;
		return A8(_user$project$Main$collision, _p14._0._0 - 10, _p14._0._1 - 10, 20, 20, px, py, 20, 10);
	});
var _user$project$Main$hitPlayer = F3(
	function (px, py, monster) {
		var _p15 = monster;
		return !A8(_user$project$Main$collision, _p15._0._0 - 10, _p15._0._1 - 10, 20, 20, px, py, 20, 10);
	});
var _user$project$Main$notTime = function (pos) {
	var _p16 = pos;
	if ((_p16._0 === 0) && (_p16._1 === 0)) {
		return false;
	} else {
		return true;
	}
};
var _user$project$Main$hit1 = F3(
	function (xp, yp, bul) {
		var _p17 = bul;
		return !A8(_user$project$Main$collision, xp, yp, 20, 10, _p17._0._0, _p17._0._1, 2, 10);
	});
var _user$project$Main$hit = F3(
	function (xp, yp, bul) {
		var _p18 = bul;
		return A8(_user$project$Main$collision, xp, yp, 20, 10, _p18._0._0, _p18._0._1, 2, 10);
	});
var _user$project$Main$test = F3(
	function (xp, yp, weapon) {
		var _p19 = weapon;
		return !A8(_user$project$Main$collision, xp, yp, 20, 10, _p19._0, _p19._1, 10, 10);
	});
var _user$project$Main$getWeapon = F4(
	function (xp, yp, curWep, weapon) {
		var _p20 = weapon;
		return (!A8(_user$project$Main$collision, xp, yp, 20, 10, _p20._0, _p20._1, 10, 10)) ? curWep : _p20._2;
	});
var _user$project$Main$rem = F2(
	function (str, val) {
		return !_elm_lang$core$Native_Utils.eq(str, val);
	});
var _user$project$Main$getValues = function (monst) {
	var _p21 = monst;
	return {ctor: '_Tuple2', _0: _p21._0._0, _1: _p21._0._1};
};
var _user$project$Main$getShots = function (monster) {
	var _p22 = monster;
	switch (_p22._0._2) {
		case 1:
			return (_elm_lang$core$Native_Utils.cmp(
				A2(
					_elm_lang$core$Basics_ops['%'],
					_elm_lang$core$Basics$floor(_p22._0._4),
					3000),
				100) < 0) ? {ctor: '_Tuple2', _0: _p22._0._0, _1: _p22._0._1 + 30} : {ctor: '_Tuple2', _0: 0, _1: 0};
		case 2:
			return (_elm_lang$core$Native_Utils.cmp(
				A2(
					_elm_lang$core$Basics_ops['%'],
					_elm_lang$core$Basics$floor(_p22._0._4),
					3000),
				300) < 0) ? {ctor: '_Tuple2', _0: _p22._0._0, _1: _p22._0._1 + 30} : {ctor: '_Tuple2', _0: 0, _1: 0};
		case 3:
			var _p23 = _p22._0._4;
			return ((_elm_lang$core$Native_Utils.cmp(
				A2(
					_elm_lang$core$Basics_ops['%'],
					_elm_lang$core$Basics$floor(_p23),
					1000),
				100) < 0) || ((_elm_lang$core$Native_Utils.cmp(
				A2(
					_elm_lang$core$Basics_ops['%'],
					_elm_lang$core$Basics$floor(_p23),
					5500),
				100) < 0) || (_elm_lang$core$Native_Utils.cmp(
				A2(
					_elm_lang$core$Basics_ops['%'],
					_elm_lang$core$Basics$floor(_p23),
					6000),
				100) < 0))) ? {ctor: '_Tuple2', _0: _p22._0._0, _1: _p22._0._1 + 30} : {ctor: '_Tuple2', _0: 0, _1: 0};
		case 4:
			var _p24 = _p22._0._4;
			return ((_elm_lang$core$Native_Utils.cmp(
				A2(
					_elm_lang$core$Basics_ops['%'],
					_elm_lang$core$Basics$floor(_p24),
					1000),
				100) < 0) || (_elm_lang$core$Native_Utils.cmp(
				A2(
					_elm_lang$core$Basics_ops['%'],
					_elm_lang$core$Basics$floor(_p24),
					1500),
				100) < 0)) ? {ctor: '_Tuple2', _0: _p22._0._0, _1: _p22._0._1 + 30} : {ctor: '_Tuple2', _0: 0, _1: 0};
		default:
			return (_elm_lang$core$Native_Utils.cmp(
				A2(
					_elm_lang$core$Basics_ops['%'],
					_elm_lang$core$Basics$floor(_p22._0._4),
					500),
				7) < 0) ? {ctor: '_Tuple2', _0: _p22._0._0, _1: _p22._0._1 + 30} : {ctor: '_Tuple2', _0: 0, _1: 0};
	}
};
var _user$project$Main$onScreen = function (star) {
	var _p25 = star;
	var _p26 = _p25._1;
	return (_elm_lang$core$Native_Utils.cmp(_p26, 600) < 0) && (_elm_lang$core$Native_Utils.cmp(_p26, 0) > 0);
};
var _user$project$Main$updateStar = F2(
	function (deltaT, star) {
		var _p27 = star;
		return {ctor: '_Tuple2', _0: _p27._0, _1: _p27._1 + 0.5};
	});
var _user$project$Main$monsterUpdate = F2(
	function (deltaT, updater) {
		var _p28 = updater;
		return _p28._1(
			{ctor: '_Tuple2', _0: deltaT, _1: 0});
	});
var _user$project$Main$updatePos = F2(
	function (deltaT, updater) {
		var _p29 = updater;
		return _p29._1(
			{ctor: '_Tuple2', _0: deltaT, _1: 0});
	});
var _user$project$Main$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return {x: a, y: b, bullets: c, monsters: d, lastTime: e, time: f, stars: g, interval: h, health: i, weapons: j, curWeapon: k, invincible: l, level: m, pressed: n};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Main$Monsters = F2(
	function (a, b) {
		return {ctor: 'Monsters', _0: a, _1: b};
	});
var _user$project$Main$monster1 = F6(
	function (x, y, c, health, lifeSpan, _p30) {
		var _p31 = _p30;
		var _p33 = _p31._1;
		var _p32 = _p31._0;
		var newY = y + (_p32 / 10);
		return A2(
			_user$project$Main$Monsters,
			{ctor: '_Tuple5', _0: x, _1: newY, _2: c, _3: health - _p33, _4: lifeSpan + _p32},
			A5(_user$project$Main$monster1, x, newY, c, health - _p33, lifeSpan + _p32));
	});
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: {
		x: 250,
		y: 450,
		bullets: {ctor: '[]'},
		monsters: {
			ctor: '::',
			_0: A6(
				_user$project$Main$monster1,
				250,
				0,
				1,
				4,
				0,
				{ctor: '_Tuple2', _0: 0, _1: 0}),
			_1: {ctor: '[]'}
		},
		lastTime: _elm_lang$core$Maybe$Nothing,
		time: 0,
		stars: {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 100, _1: 100},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 200, _1: 200},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 300, _1: 300},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 450, _1: 300},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 455, _1: 325},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 234, _1: 239},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 294, _1: 450},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 129, _1: 18},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		},
		interval: {m1: 4, m2: 7, m3: 10, m4: 15},
		health: 5,
		weapons: {ctor: '[]'},
		curWeapon: 1,
		invincible: false,
		level: 1,
		pressed: {ctor: '[]'}
	},
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$monster2b = F7(
	function (x, y, c, initialX, health, lifeSpan, _p34) {
		var _p35 = _p34;
		var _p37 = _p35._1;
		var _p36 = _p35._0;
		if (_elm_lang$core$Native_Utils.cmp(x, initialX - 50) < 0) {
			return A2(
				_user$project$Main$Monsters,
				{ctor: '_Tuple5', _0: x, _1: y, _2: c, _3: health - _p37, _4: lifeSpan + _p36},
				A6(_user$project$Main$monster2, x, y, c, x, health - _p37, lifeSpan + _p36));
		} else {
			var newY = y + (_p36 / 10);
			var newX = x - (_p36 / 20);
			return A2(
				_user$project$Main$Monsters,
				{ctor: '_Tuple5', _0: newX, _1: newY, _2: c, _3: health - _p37, _4: lifeSpan + _p36},
				A6(_user$project$Main$monster2b, newX, newY, c, initialX, health - _p37, lifeSpan + _p36));
		}
	});
var _user$project$Main$monster2 = F7(
	function (x, y, c, initialX, health, lifeSpan, _p38) {
		var _p39 = _p38;
		var _p41 = _p39._1;
		var _p40 = _p39._0;
		if (_elm_lang$core$Native_Utils.cmp(x, initialX + 50) > 0) {
			return A2(
				_user$project$Main$Monsters,
				{ctor: '_Tuple5', _0: x, _1: y, _2: c, _3: health - _p41, _4: lifeSpan + _p40},
				A6(_user$project$Main$monster2b, x, y, c, x, health - _p41, lifeSpan + _p40));
		} else {
			var newY = y + (_p40 / 10);
			var newX = x + (_p40 / 20);
			return A2(
				_user$project$Main$Monsters,
				{ctor: '_Tuple5', _0: newX, _1: newY, _2: c, _3: health - _p41, _4: lifeSpan + _p40},
				A6(_user$project$Main$monster2, newX, newY, c, initialX, health - _p41, lifeSpan + _p40));
		}
	});
var _user$project$Main$monster3 = F8(
	function (x, y, xp, yp, c, health, lifeSpan, _p42) {
		var _p43 = _p42;
		var _p45 = _p43._1;
		var _p44 = _p43._0;
		var newY = y + (_p44 / 10);
		var newX = _elm_lang$core$Native_Utils.eq(x, xp) ? x : ((_elm_lang$core$Native_Utils.cmp(x, xp) < 0) ? (x + (_p44 / 7)) : (x - (_p44 / 7)));
		return A2(
			_user$project$Main$Monsters,
			{ctor: '_Tuple5', _0: newX, _1: newY, _2: c, _3: health - _p45, _4: lifeSpan + _p44},
			A7(_user$project$Main$monster3, newX, newY, xp, yp, c, health - _p45, lifeSpan + _p44));
	});
var _user$project$Main$monster4b = F6(
	function (x, y, c, health, lifeSpan, _p46) {
		var _p47 = _p46;
		var _p49 = _p47._1;
		var _p48 = _p47._0;
		return (_elm_lang$core$Native_Utils.cmp(lifeSpan, 15000) < 0) ? A2(
			_user$project$Main$Monsters,
			{ctor: '_Tuple5', _0: x, _1: y, _2: c, _3: health - _p49, _4: lifeSpan + _p48},
			A5(_user$project$Main$monster4b, x, y, c, health - _p49, lifeSpan + _p48)) : A2(
			_user$project$Main$Monsters,
			{ctor: '_Tuple5', _0: x, _1: y, _2: c, _3: health - _p49, _4: lifeSpan + _p48},
			A5(_user$project$Main$monster1, x, y, c, health - _p49, lifeSpan + _p48));
	});
var _user$project$Main$monster4 = F6(
	function (x, y, c, health, lifeSpan, _p50) {
		var _p51 = _p50;
		var _p53 = _p51._1;
		var _p52 = _p51._0;
		var newY = y + (_p52 / 10);
		return (_elm_lang$core$Native_Utils.cmp(y, 300) > 0) ? A2(
			_user$project$Main$Monsters,
			{ctor: '_Tuple5', _0: x, _1: newY, _2: c, _3: health - _p53, _4: lifeSpan + _p52},
			A5(_user$project$Main$monster4b, x, newY, c, health - _p53, lifeSpan + _p52)) : A2(
			_user$project$Main$Monsters,
			{ctor: '_Tuple5', _0: x, _1: newY, _2: c, _3: health - _p53, _4: lifeSpan + _p52},
			A5(_user$project$Main$monster4, x, newY, c, health - _p53, lifeSpan + _p52));
	});
var _user$project$Main$Updater = F2(
	function (a, b) {
		return {ctor: 'Updater', _0: a, _1: b};
	});
var _user$project$Main$bullet1 = F4(
	function (x, y, health, _p54) {
		var _p55 = _p54;
		var _p56 = _p55._1;
		var newY = y - (_p55._0 / 7);
		var newX = x;
		return A2(
			_user$project$Main$Updater,
			{ctor: '_Tuple3', _0: newX, _1: newY, _2: health - _p56},
			A3(_user$project$Main$bullet1, newX, newY, health - _p56));
	});
var _user$project$Main$mbullet1 = F4(
	function (x, y, health, _p57) {
		var _p58 = _p57;
		var _p59 = _p58._1;
		var newY = y + (_p58._0 / 7);
		var newX = x;
		return A2(
			_user$project$Main$Updater,
			{ctor: '_Tuple3', _0: newX, _1: newY, _2: health - _p59},
			A3(_user$project$Main$mbullet1, newX, newY, health - _p59));
	});
var _user$project$Main$toBullets = function (positions) {
	var _p60 = positions;
	return A4(
		_user$project$Main$mbullet1,
		_p60._0,
		_p60._1,
		1,
		{ctor: '_Tuple2', _0: 0, _1: 0});
};
var _user$project$Main$bullet2b = F7(
	function (x, y, xc, yc, health, lifeSpan, _p61) {
		var _p62 = _p61;
		var _p63 = _p62._0;
		var newHealth = (_elm_lang$core$Native_Utils.cmp(lifeSpan, 5000) > 0) ? 0 : (health - _p62._1);
		var newX = x + (_p63 / 7);
		var newY = yc + _elm_lang$core$Basics$sqrt(
			_elm_lang$core$Basics$abs(
				Math.pow(50, 2) - Math.pow(newX - xc, 2)));
		return (_elm_lang$core$Native_Utils.cmp(newX, xc + 50) > -1) ? A2(
			_user$project$Main$Updater,
			{ctor: '_Tuple3', _0: newX, _1: newY, _2: newHealth},
			A6(_user$project$Main$bullet2, newX, newY, xc, yc, newHealth, lifeSpan + _p63)) : A2(
			_user$project$Main$Updater,
			{ctor: '_Tuple3', _0: newX, _1: newY, _2: newHealth},
			A6(_user$project$Main$bullet2b, newX, newY, xc, yc, newHealth, lifeSpan + _p63));
	});
var _user$project$Main$bullet2 = F7(
	function (x, y, xc, yc, health, lifeSpan, _p64) {
		var _p65 = _p64;
		var _p66 = _p65._0;
		var newHealth = (_elm_lang$core$Native_Utils.cmp(lifeSpan, 5000) > 0) ? 0 : (health - _p65._1);
		var newX = x - (_p66 / 7);
		var newY = yc - _elm_lang$core$Basics$sqrt(
			_elm_lang$core$Basics$abs(
				Math.pow(50, 2) - Math.pow(newX - xc, 2)));
		return (_elm_lang$core$Native_Utils.cmp(newX, xc - 50) < 1) ? A2(
			_user$project$Main$Updater,
			{ctor: '_Tuple3', _0: newX, _1: newY, _2: newHealth},
			A6(_user$project$Main$bullet2b, newX, newY, xc, yc, newHealth, lifeSpan + _p66)) : A2(
			_user$project$Main$Updater,
			{ctor: '_Tuple3', _0: newX, _1: newY, _2: newHealth},
			A6(_user$project$Main$bullet2, newX, newY, xc, yc, newHealth, lifeSpan + _p66));
	});
var _user$project$Main$bullet3 = F9(
	function (x, y, xp, yp, xm, ym, health, lifeSpan, _p67) {
		var _p68 = _p67;
		var _p70 = _p68._1;
		var _p69 = _p68._0;
		var newY = y - (_p69 / 7);
		var newX = _elm_lang$core$Native_Utils.eq(x, xm) ? x : ((_elm_lang$core$Native_Utils.cmp(x, xm) < 0) ? (x + (_p69 / 7)) : (x - (_p69 / 7)));
		return A2(
			_user$project$Main$Updater,
			{ctor: '_Tuple3', _0: newX, _1: newY, _2: health - _p70},
			A8(_user$project$Main$bullet3, newX, newY, xp, yp, xm, ym, health - _p70, lifeSpan));
	});
var _user$project$Main$bullet4 = F6(
	function (x, y, initialX, initialY, health, _p71) {
		var _p72 = _p71;
		var _p73 = _p72._1;
		var newY = y - (_p72._0 / 25);
		var deltaY = newY - initialY;
		var newX = initialX + (30 * _elm_lang$core$Basics$sin(deltaY / 7));
		return A2(
			_user$project$Main$Updater,
			{ctor: '_Tuple3', _0: newX, _1: newY, _2: health - _p73},
			A5(_user$project$Main$bullet4, newX, newY, initialX, initialY, health - _p73));
	});
var _user$project$Main$bullet4create = F2(
	function (x, y) {
		return A6(
			_user$project$Main$bullet4,
			x + 10,
			y,
			x + 10,
			y,
			3,
			{ctor: '_Tuple2', _0: 0, _1: 0});
	});
var _user$project$Main$Up = function (a) {
	return {ctor: 'Up', _0: a};
};
var _user$project$Main$Levelup = function (a) {
	return {ctor: 'Levelup', _0: a};
};
var _user$project$Main$Downgrade = function (a) {
	return {ctor: 'Downgrade', _0: a};
};
var _user$project$Main$NewWep = function (a) {
	return {ctor: 'NewWep', _0: a};
};
var _user$project$Main$DropNewWeapon = F2(
	function (a, b) {
		return {ctor: 'DropNewWeapon', _0: a, _1: b};
	});
var _user$project$Main$NewWeapon = function (a) {
	return {ctor: 'NewWeapon', _0: a};
};
var _user$project$Main$Bullet = F2(
	function (a, b) {
		return {ctor: 'Bullet', _0: a, _1: b};
	});
var _user$project$Main$RandMonster = F2(
	function (a, b) {
		return {ctor: 'RandMonster', _0: a, _1: b};
	});
var _user$project$Main$NewMonster = F2(
	function (a, b) {
		return {ctor: 'NewMonster', _0: a, _1: b};
	});
var _user$project$Main$NewStar = function (a) {
	return {ctor: 'NewStar', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p74 = msg;
		switch (_p74.ctor) {
			case 'Tick':
				var _p78 = _p74._0;
				var _p75 = model.lastTime;
				if (_p75.ctor === 'Just') {
					var _p77 = _p75._0;
					return {
						ctor: '_Tuple2',
						_0: function () {
							var monst = A2(
								_elm_lang$core$List$filter,
								_user$project$Main$removeDead,
								A2(
									_user$project$Main$upd,
									model.bullets,
									A2(
										_elm_lang$core$List$map,
										_user$project$Main$monsterUpdate(_p78 - _p77),
										model.monsters)));
							var bull = A2(
								_elm_lang$core$List$filter,
								_user$project$Main$rmvBullets,
								A2(
									_user$project$Main$updateBul,
									model.monsters,
									A2(
										_elm_lang$core$List$map,
										_user$project$Main$updatePos(_p78 - _p77),
										model.bullets)));
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									lastTime: _elm_lang$core$Maybe$Just(_p78),
									x: A2(_elm_lang$core$List$member, 'left', model.pressed) ? (model.x - 3) : (A2(_elm_lang$core$List$member, 'right', model.pressed) ? (model.x + 3) : model.x),
									y: A2(_elm_lang$core$List$member, 'up', model.pressed) ? (model.y - 3) : (A2(_elm_lang$core$List$member, 'down', model.pressed) ? (model.y + 3) : model.y),
									stars: A2(
										_elm_lang$core$List$filter,
										_user$project$Main$onScreen,
										A2(
											_elm_lang$core$List$map,
											_user$project$Main$updateStar(_p78 - _p77),
											model.stars)),
									bullets: A2(
										_elm_lang$core$List$filter,
										A2(_user$project$Main$hit1, model.x, model.y),
										bull),
									monsters: A2(
										_elm_lang$core$List$filter,
										A2(_user$project$Main$hitPlayer, model.x, model.y),
										monst),
									health: (!_elm_lang$core$List$isEmpty(
										A2(
											_elm_lang$core$List$filter,
											A2(_user$project$Main$hitPlayer1, model.x, model.y),
											monst))) ? (model.health - 2) : ((!_elm_lang$core$List$isEmpty(
										A2(
											_elm_lang$core$List$filter,
											A2(_user$project$Main$hit, model.x, model.y),
											bull))) ? (model.health - 1) : model.health),
									curWeapon: function () {
										var _p76 = _elm_lang$core$List$head(
											A2(
												_elm_lang$core$List$map,
												A3(_user$project$Main$getWeapon, model.x, model.y, model.curWeapon),
												model.weapons));
										if (_p76.ctor === 'Just') {
											return _p76._0;
										} else {
											return model.curWeapon;
										}
									}(),
									weapons: _elm_lang$core$List$isEmpty(model.weapons) ? model.weapons : A2(
										_elm_lang$core$List$filter,
										A2(_user$project$Main$test, model.x, model.y),
										model.weapons)
								});
						}(),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								lastTime: _elm_lang$core$Maybe$Just(_p78)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'Up':
				switch (_p74._0) {
					case 37:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									pressed: A2(
										_elm_lang$core$List$filter,
										_user$project$Main$rem('left'),
										model.pressed)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 39:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									pressed: A2(
										_elm_lang$core$List$filter,
										_user$project$Main$rem('right'),
										model.pressed)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 40:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									pressed: A2(
										_elm_lang$core$List$filter,
										_user$project$Main$rem('down'),
										model.pressed)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 38:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									pressed: A2(
										_elm_lang$core$List$filter,
										_user$project$Main$rem('up'),
										model.pressed)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'Key':
				switch (_p74._0) {
					case 37:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									pressed: {ctor: '::', _0: 'left', _1: model.pressed}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 39:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									pressed: {ctor: '::', _0: 'right', _1: model.pressed}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 40:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									pressed: {ctor: '::', _0: 'down', _1: model.pressed}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 38:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									pressed: {ctor: '::', _0: 'up', _1: model.pressed}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 32:
						var _p79 = model.curWeapon;
						switch (_p79) {
							case 1:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{
											bullets: {
												ctor: '::',
												_0: A4(
													_user$project$Main$bullet1,
													model.x + 10,
													model.y,
													1,
													{ctor: '_Tuple2', _0: 0, _1: 0}),
												_1: model.bullets
											}
										}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							case 2:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{
											bullets: {
												ctor: '::',
												_0: A7(
													_user$project$Main$bullet2,
													model.x + 40,
													model.y - 5,
													model.x + 10,
													model.y + 5,
													1,
													0,
													{ctor: '_Tuple2', _0: 0, _1: 0}),
												_1: model.bullets
											}
										}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							case 3:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{
											bullets: {
												ctor: '::',
												_0: function () {
													var _p80 = _elm_lang$core$List$head(model.monsters);
													if (_p80.ctor === 'Just') {
														var _p81 = _user$project$Main$getValues(_p80._0);
														var x = _p81._0;
														var y = _p81._1;
														return A9(
															_user$project$Main$bullet3,
															model.x,
															model.y - 10,
															model.x,
															model.y - 10,
															x,
															y,
															4,
															0,
															{ctor: '_Tuple2', _0: 0, _1: 0});
													} else {
														return A4(
															_user$project$Main$bullet1,
															model.x + 10,
															model.y,
															1,
															{ctor: '_Tuple2', _0: 0, _1: 0});
													}
												}(),
												_1: model.bullets
											}
										}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							case 4:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{
											bullets: {
												ctor: '::',
												_0: A2(_user$project$Main$bullet4create, model.x, model.y - 10),
												_1: model.bullets
											}
										}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										model,
										{
											bullets: {
												ctor: '::',
												_0: A7(
													_user$project$Main$bullet2,
													model.x + 40,
													model.y - 5,
													model.x + 10,
													model.y + 5,
													1,
													0,
													{ctor: '_Tuple2', _0: 0, _1: 0}),
												_1: model.bullets
											}
										}),
									_1: _elm_lang$core$Platform_Cmd$none
								};
						}
					case 73:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{invincible: !model.invincible}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 49:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{curWeapon: 1}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 50:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{curWeapon: 2}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 51:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{curWeapon: 3}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 52:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{curWeapon: 4}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return A2(
							_elm_lang$core$Debug$log,
							_elm_lang$core$Basics$toString(_p74._0),
							{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
				}
			case 'BackgroundUpdate':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_elm_lang$core$Random$generate,
						_user$project$Main$NewStar,
						A2(_elm_lang$core$Random$int, 1, 600))
				};
			case 'NewStar':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							stars: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: _p74._0, _1: 0},
								_1: model.stars
							}
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'RandMonster':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_elm_lang$core$Random$generate,
						_user$project$Main$NewMonster(_p74._0),
						A2(_elm_lang$core$Random$float, 1, 600))
				};
			case 'NewMonster':
				var _p83 = _p74._1;
				var _p82 = _p74._0;
				switch (_p82) {
					case 1:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									monsters: {
										ctor: '::',
										_0: A6(
											_user$project$Main$monster1,
											_p83,
											0,
											1,
											4,
											0,
											{ctor: '_Tuple2', _0: 0, _1: 0}),
										_1: model.monsters
									}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 2:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									monsters: {
										ctor: '::',
										_0: A7(
											_user$project$Main$monster2,
											_p83,
											0,
											2,
											_p83,
											4,
											0,
											{ctor: '_Tuple2', _0: 0, _1: 0}),
										_1: model.monsters
									}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 3:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									monsters: {
										ctor: '::',
										_0: A8(
											_user$project$Main$monster3,
											_p83,
											0,
											model.x,
											model.y,
											3,
											4,
											0,
											{ctor: '_Tuple2', _0: 0, _1: 0}),
										_1: model.monsters
									}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 4:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									monsters: {
										ctor: '::',
										_0: A6(
											_user$project$Main$monster4,
											_p83,
											0,
											1,
											4,
											0,
											{ctor: '_Tuple2', _0: 0, _1: 0}),
										_1: model.monsters
									}
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'Bullet':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							bullets: A2(
								_elm_lang$core$List$append,
								model.bullets,
								A2(
									_elm_lang$core$List$map,
									_user$project$Main$toBullets,
									A2(_elm_lang$core$List$filter, _user$project$Main$notTime, _p74._0)))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'NewWeapon':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_elm_lang$core$Random$generate,
						_user$project$Main$NewWep,
						A2(
							_elm_lang$core$Random$pair,
							A2(_elm_lang$core$Random$float, 100, 500),
							A2(_elm_lang$core$Random$float, 300, 500)))
				};
			case 'NewWep':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_elm_lang$core$Random$generate,
						_user$project$Main$DropNewWeapon(
							{ctor: '_Tuple2', _0: _p74._0._0, _1: _p74._0._1}),
						A2(_elm_lang$core$Random$int, 2, 4))
				};
			case 'DropNewWeapon':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							weapons: {
								ctor: '::',
								_0: {ctor: '_Tuple3', _0: _p74._0._0, _1: _p74._0._1, _2: _p74._1},
								_1: {ctor: '[]'}
							}
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Downgrade':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{curWeapon: 1}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{level: model.level + 0.3}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$BackgroundUpdate = function (a) {
	return {ctor: 'BackgroundUpdate', _0: a};
};
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$Key = function (a) {
	return {ctor: 'Key', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$animation_frame$AnimationFrame$times(_user$project$Main$Tick),
			_1: {
				ctor: '::',
				_0: _elm_lang$keyboard$Keyboard$downs(
					function (k) {
						return _user$project$Main$Key(k);
					}),
				_1: {
					ctor: '::',
					_0: _elm_lang$keyboard$Keyboard$ups(
						function (k) {
							return _user$project$Main$Up(k);
						}),
					_1: {
						ctor: '::',
						_0: A2(_elm_lang$core$Time$every, 0.1 * _elm_lang$core$Time$second, _user$project$Main$BackgroundUpdate),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Time$every,
								(model.interval.m1 / model.level) * _elm_lang$core$Time$second,
								_user$project$Main$RandMonster(1)),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$core$Time$every,
									(model.interval.m2 / model.level) * _elm_lang$core$Time$second,
									_user$project$Main$RandMonster(2)),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$core$Time$every,
										(model.interval.m3 / model.level) * _elm_lang$core$Time$second,
										_user$project$Main$RandMonster(3)),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$core$Time$every,
											(model.interval.m4 / model.level) * _elm_lang$core$Time$second,
											_user$project$Main$RandMonster(4)),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$core$Time$every,
												0.1 * _elm_lang$core$Time$second,
												_user$project$Main$Bullet(
													A2(_elm_lang$core$List$map, _user$project$Main$getShots, model.monsters))),
											_1: {
												ctor: '::',
												_0: A2(_elm_lang$core$Time$every, 20 * _elm_lang$core$Time$second, _user$project$Main$NewWeapon),
												_1: {
													ctor: '::',
													_0: A2(_elm_lang$core$Time$every, 10 * _elm_lang$core$Time$second, _user$project$Main$Downgrade),
													_1: {
														ctor: '::',
														_0: A2(_elm_lang$core$Time$every, 30 * _elm_lang$core$Time$second, _user$project$Main$Levelup),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
